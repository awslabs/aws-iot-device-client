# This CMake module is used to generate semantic version information for the AWS IoT Device Client
# and inject it into our source code, making the version information available to the compiled binary
# so that it can be written to the logs for debugging purposes. To increment the major/minor versions
# of the device client, this module expects to find a git tag in the form of "v1.0", where the first number
# is the major version and the second number is the minor version. This module will search starting at HEAD
# until it finds the latest versioned tag - git tags that do not start with "v" will be ignored.
#
# Additionally, the PATCH version of the version number is automatically incremented based on the number of commits
# that we see between the current revision and the latest Git tag. For more information on Semantic Versioning,
# check out https://semver.org/ and for more information on Git tags, check out https://git-scm.com/book/en/v2/Git-Basics-Tagging

cmake_minimum_required(VERSION 3.10)

# Check to make sure we have Git info for this package
execute_process(COMMAND git log --pretty=format:'%h' -n 1
                OUTPUT_VARIABLE GIT_INFO
                ERROR_QUIET)

if (GIT_VERSION AND NOT ${GIT_INFO} STREQUAL "")
    message("-- Using Git to calculate AWS IoT Device Client version information...")

	# Get last tag from git - this only matches tags starting with v, so we ignore non-versioning tags
	execute_process(COMMAND ${GIT_EXECUTABLE} describe --abbrev=0 --tags --match "v[0-9]*"
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE ${PROJECT_NAME}_VERSION_STRING
		OUTPUT_STRIP_TRAILING_WHITESPACE)

	# Determine how many commits since last tag
	execute_process(COMMAND ${GIT_EXECUTABLE} rev-list main ${${PROJECT_NAME}_VERSION_STRING}..HEAD --count
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE ${PROJECT_NAME}_VERSION_AHEAD
		OUTPUT_STRIP_TRAILING_WHITESPACE)

    # Get current commit SHA from git
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE ${PROJECT_NAME}_VERSION_GIT_SHA
        OUTPUT_STRIP_TRAILING_WHITESPACE)

	# Collect the partial versions into a list
	string(REGEX MATCHALL "[0-9]+" ${PROJECT_NAME}_PARTIAL_VERSION_LIST
		${${PROJECT_NAME}_VERSION_STRING})

	# Set the version numbers
	list(GET ${PROJECT_NAME}_PARTIAL_VERSION_LIST
		0 ${PROJECT_NAME}_VERSION_MAJOR)
	list(GET ${PROJECT_NAME}_PARTIAL_VERSION_LIST
		1 ${PROJECT_NAME}_VERSION_MINOR)
    set(${PROJECT_NAME}_VERSION_PATCH ${${PROJECT_NAME}_VERSION_AHEAD})

	# Unset the list
	unset(${PROJECT_NAME}_PARTIAL_VERSION_LIST)

	# Set full project version string
	set(${PROJECT_NAME}_VERSION_STRING_FULL
    		v${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH}-${${PROJECT_NAME}_VERSION_GIT_SHA})


    message("-- Generated AWS IoT Device Client version: ${${PROJECT_NAME}_VERSION_STRING_FULL}")
    # Save version to file (which will be used when Git is not available
    # or VERSION_UPDATE_FROM_GIT is disabled)
    file(WRITE ${CMAKE_SOURCE_DIR}/.version ${${PROJECT_NAME}_VERSION_STRING_FULL}
        "*" ${${PROJECT_NAME}_VERSION_STRING}
        "*" ${${PROJECT_NAME}_VERSION_MAJOR}
        "*" ${${PROJECT_NAME}_VERSION_MINOR}
        "*" ${${PROJECT_NAME}_VERSION_PATCH}
        "*" ${${PROJECT_NAME}_VERSION_AHEAD}
        "*" ${${PROJECT_NAME}_VERSION_GIT_SHA})
else()
    # Git is not available (this is the case if the source is packaged as an archive), get version from file
    file(STRINGS ${CMAKE_SOURCE_DIR}/.version ${PROJECT_NAME}_VERSION_LIST)
    string(REPLACE "*" ";" ${PROJECT_NAME}_VERSION_LIST ${${PROJECT_NAME}_VERSION_LIST})
    # Set partial versions
    list(GET ${PROJECT_NAME}_VERSION_LIST 0 ${PROJECT_NAME}_VERSION_STRING_FULL)
    list(GET ${PROJECT_NAME}_VERSION_LIST 1 ${PROJECT_NAME}_VERSION_STRING)
    list(GET ${PROJECT_NAME}_VERSION_LIST 2 ${PROJECT_NAME}_VERSION_MAJOR)
    list(GET ${PROJECT_NAME}_VERSION_LIST 3 ${PROJECT_NAME}_VERSION_MINOR)
    list(GET ${PROJECT_NAME}_VERSION_LIST 4 ${PROJECT_NAME}_VERSION_PATCH)
    list(GET ${PROJECT_NAME}_VERSION_LIST 5 ${PROJECT_NAME}_VERSION_AHEAD)
    list(GET ${PROJECT_NAME}_VERSION_LIST 6 ${PROJECT_NAME}_VERSION_GIT_SHA)
    unset(${PROJECT_NAME}_VERSION_LIST)

    message("-- Loaded AWS IoT Device Client version: ${${PROJECT_NAME}_VERSION_STRING_FULL}")
endif()