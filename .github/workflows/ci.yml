name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

env:
  PACKAGE_NAME: aws-iot-device-client

jobs:
  update-doxygen:
    runs-on: ubuntu-latest
    if: ((github.event.pull_request.merged == true) && (github.ref == 'refs/heads/main'))
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
        fetch-depth: 0
    - name: Create local changes
      run: |
        sudo apt-get install doxygen
        cd docs
        doxygen
        cp -r ./html/* ./
        rm -rf ./html
        git add .
    - name: Commit files
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git commit -m "Auto-generate Doxygen documentation via Github Actions" -a
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages
        force: true

  build-ubuntu-18-x64:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE
      - name: Archive ubuntu-18-x64 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.ubuntu.x64.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.ubuntu.x64.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./setup/

  build-amazonlinux:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/amazonlinux:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE

  build-rhel-ubi8:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubi8:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE
      - name: Archive rhel-ubi8 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.rhel.x64.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.rhel.x64.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./setup/

  gpp-compat:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    strategy:
      matrix:
        version: [ 5, 6, 7, 8, 11 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compiler=g++-${{ matrix.version }}

  clangpp-compat:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    strategy:
      matrix:
        version: [ 5.0, 6.0, 7, 8, 9, 11 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compiler=clang-${{ matrix.version }}

  build-armhf32:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=armhf_cross_mode
      - name: Archive armhf32 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.armhf.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.armhf.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./setup/

  build-mips32:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=mips_cross_mode
      - name: Archive mips32 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.mips.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.mips.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./setup/

  build-aarch64:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=aarch64_cross_mode
      - name: Archive aarch64 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.aarch64.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.aarch64.${{ env.PACKAGE_NAME }}.static"
          path: |
            ./setup/

  build-shared-libs-ubuntu-18-x64:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=shared_lib_mode
      - name: Archive ubuntu-18-x64 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.ubuntu.x64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive SDK shared libraries
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.ubuntu.x64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/shared_install_dir
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.ubuntu.x64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./setup/

  build-shared-libs-amazonlinux:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/amazonlinux:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=shared_lib_mode

  build-shared-libs-rhel-ubi8:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubi8:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=shared_lib_mode
      - name: Archive rhel-ubi8 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.rhel.x64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive SDK shared libraries
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.rhel.x64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/shared_install_dir
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.rhel.x64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./setup/

  build-shared-libs-armhf32:
      runs-on: ubuntu-latest
      if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Build ${{ env.PACKAGE_NAME }}
          run: |
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
            export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
            docker pull $DOCKER_IMAGE
            docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=armhf_cross_mode_shared_libs
        - name: Archive armhf32 Build Artifact
          uses: actions/upload-artifact@v2
          # Run for main branch only
          if: github.ref == 'refs/heads/main'
          with:
            name: "DC.linux.armhf.${{ env.PACKAGE_NAME }}.shared"
            path: |
              ./build/${{ env.PACKAGE_NAME }}
        - name: Archive SDK shared libraries
          uses: actions/upload-artifact@v2
          # Run for main branch only
          if: github.ref == 'refs/heads/main'
          with:
            name: "DC.linux.armhf.${{ env.PACKAGE_NAME }}.shared"
            path: |
              ./build/shared_install_dir
        - name: Archive setup files
          uses: actions/upload-artifact@v2
          # Run for main branch only
          if: github.ref == 'refs/heads/main'
          with:
            name: "DC.linux.armhf.${{ env.PACKAGE_NAME }}.shared"
            path: |
              ./setup/

  build-shared-libs-mips32:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=mips_cross_mode_shared_libs
      - name: Archive mips32 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.mips.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive SDK shared libraries
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.mips.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/shared_install_dir
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.mips.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./setup/

  build-shared-libs-aarch64:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=aarch64_cross_mode_shared_libs
      - name: Archive aarch64 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.aarch64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
      - name: Archive SDK shared libraries
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.aarch64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./build/shared_install_dir
      - name: Archive setup files
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "DC.linux.aarch64.${{ env.PACKAGE_NAME }}.shared"
          path: |
            ./setup/

  build-st-ubuntu-18-x64:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }} ST Component Mode
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=st_component_mode
      - name: Archive ST Component Mode Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "ST.ubuntu.x64.${{ env.PACKAGE_NAME }}"
          path: |
            ./build/${{ env.PACKAGE_NAME }}

  build-st-ubuntu-18-aarch64:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=st_aarch64_cross_mode
      - name: Archive ST Ubuntu aarch64 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "ST.ubuntu.aarch64.${{ env.PACKAGE_NAME }}"
          path: |
            ./build/${{ env.PACKAGE_NAME }}

  build-st-ubuntu-18-armhf32:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || ((github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository))
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u awslabs --password-stdin
          export DOCKER_IMAGE=ghcr.io/awslabs/aws-iot-device-client/ubuntu-18-x64:latest
          docker pull $DOCKER_IMAGE
          docker run --mount type=bind,source=$(pwd),target=/root/${{ env.PACKAGE_NAME }} --env GITHUB_REF $DOCKER_IMAGE --compile-mode=st_armhf_cross_mode
      - name: Archive st armhf32 Build Artifact
        uses: actions/upload-artifact@v2
        # Run for main branch only
        if: github.ref == 'refs/heads/main'
        with:
          name: "ST.linux.armhf.${{ env.PACKAGE_NAME }}"
          path: |
            ./build/${{ env.PACKAGE_NAME }}
